{"version":3,"sources":["components/UploadItem/UploadItem.module.css","components/UploadProgress/UploadProgress.module.css","logo.svg","redux/uploadFile/uploadFile.types.js","redux/uploadFile/uploadFile.actions.js","Utils/Common.js","components/Login.js","components/Dashboard.js","components/Home.js","Utils/PrivateRoute.js","Utils/PublicRoute.js","components/Navbar.js","components/UploadItem/UploadItem.js","components/UploadProgress/UploadProgress.js","App.js","serviceWorker.js","redux/uploadFile/uploadFile.utils.js","redux/uploadFile/uploadFile.reducer.js","redux/root-reducer.js","index.js"],"names":["module","exports","uploadFileTypes","SET_UPLOAD_FILE","SET_UPLOAD_PROGRESS","SUCCESS_UPLOAD_FILE","FAILURE_UPLOAD_FILE","setUploadProgress","id","progress","type","payload","failureUploadFile","getUser","userStr","sessionStorage","getItem","JSON","parse","getToken","removeUserSession","removeItem","setUserSession","token","user","setItem","stringify","useFormInput","initialValue","useState","value","setValue","onChange","e","target","Login","props","loading","setLoading","username","password","error","setError","autoComplete","style","marginTop","color","onClick","axios","post","then","response","data","history","push","catch","status","message","disabled","Dashboard","name","Home","PrivateRoute","Component","component","rest","render","to","pathname","state","from","location","PublicRoute","Navbar","authLoading","setAuthLoading","useEffect","get","className","exact","activeClassName","path","UploadItem","file","Styles","wrapperItem","leftSide","progressBar","width","percentage","connect","fileProgress","UploadFile","dispatch","uploadFile","files","length","forEach","a","async","formPayload","FormData","append","baseURL","url","method","onUploadProgress","loaded","total","percentageProgress","Math","floor","uploadedFileAmount","size","fileToUpload","toArray","filter","wrapper","map","key","setUploadFile","src","logo","alt","multiple","Boolean","window","hostname","match","modifyFiles","existingFiles","i","INITIAL_STATE","fileProgressReducer","action","rootReducer","combineReducers","middleware","thunk","composeEnchancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36008bad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperItem\":\"UploadItem_wrapperItem__24nFt\",\"leftSide\":\"UploadItem_leftSide__2Q3i-\",\"progressBar\":\"UploadItem_progressBar__We0TS\",\"percentage\":\"UploadItem_percentage__3QLpF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UploadProgress_wrapper__2mmbM\",\"closeButton\":\"UploadProgress_closeButton__1_kL5\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const uploadFileTypes = {\n  SET_UPLOAD_FILE: 'SET_UPLOAD_FILE',\n  SET_UPLOAD_PROGRESS: 'SET_UPLOAD_PROGRESS',\n  SUCCESS_UPLOAD_FILE: 'SUCCESS_UPLOAD_FILE',\n  FAILURE_UPLOAD_FILE: 'FAILURE_UPLOAD_FILE',\n}\n\nexport default uploadFileTypes\n","import axios from 'axios'\nimport uploadFileTypes from './uploadFile.types'\n\nexport const setUploadFile = data => ({\n  type: uploadFileTypes.SET_UPLOAD_FILE,\n  payload: data,\n})\n\nexport const setUploadProgress = (id, progress) => ({\n  type: uploadFileTypes.SET_UPLOAD_PROGRESS,\n  payload: {\n    id,\n    progress,\n  },\n})\n\nexport const successUploadFile = id => ({\n  type: uploadFileTypes.SUCCESS_UPLOAD_FILE,\n  payload: id,\n})\n\nexport const failureUploadFile = id => ({\n  type: uploadFileTypes.FAILURE_UPLOAD_FILE,\n  payload: id,\n})\n\nexport const uploadFile = files => dispatch => {\n  if (files.length) {\n    files.forEach(async file => {\n      const formPayload = new FormData()\n      formPayload.append('file', file.file)\n\n      try {\n        await axios({\n          baseURL: 'http://localhost:5000',\n          url: '/file',\n          method: 'post',\n          data: formPayload,\n          onUploadProgress: progress => {\n            const { loaded, total } = progress\n\n            const percentageProgress = Math.floor((loaded / total) * 100)\n            dispatch(setUploadProgress(file.id, percentageProgress))\n          },\n        })\n        dispatch(successUploadFile(file.id))\n      } catch (error) {\n        dispatch(failureUploadFile(file.id))\n      }\n    })\n  }\n}\n","// return the user data from the session storage\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);\n  else return null;\n}\n\n// return the token from the session storage\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n}\n\n// remove the token and user from the session storage\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}\n\n// set the token and user from the session storage\nexport const setUserSession = (token, user) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n}","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { setUserSession } from '../Utils/Common.js';\n\nfunction Login(props) {\n  const [loading, setLoading] = useState(false);\n  const username = useFormInput('');\n  const password = useFormInput('');\n  const [error, setError] = useState(null);\n\n  // handle button click of login form\n  const handleLogin = () => {\n    setError(null);\n    setLoading(true);\n    axios.post('http://localhost:5000/users/signin', { username: username.value, password: password.value }).then(response => {\n      setLoading(false);\n      setUserSession(response.data.token, response.data.user);\n      props.history.push('/dashboard');\n    }).catch(error => {\n      setLoading(false);\n      if (error.response.status === 401) setError(error.response.data.message);\n      else setError(\"Something went wrong. Please try again later.\");\n    });\n  }\n\n  return (\n    <div>\n      Login<br /><br />\n      <div>\n        Username<br />\n        <input type=\"text\" {...username} autoComplete=\"new-password\" />\n      </div>\n      <div style={{ marginTop: 10 }}>\n        Password<br />\n        <input type=\"password\" {...password} autoComplete=\"new-password\" />\n      </div>\n      {error && <><small style={{ color: 'red' }}>{error}</small><br /></>}<br />\n      <input type=\"button\" value={loading ? 'Loading...' : 'Login'} onClick={handleLogin} disabled={loading} /><br />\n    </div>\n  );\n}\n\nconst useFormInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  }\n  return {\n    value,\n    onChange: handleChange\n  }\n}\n\nexport default Login;","import React from 'react';\n\nimport { getUser, removeUserSession } from '../Utils/Common';\n\nfunction Dashboard(props) {\n  const user = getUser();\n\n  // handle click event of logout button\n  const handleLogout = () => {\n    removeUserSession();\n    props.history.push('/login');\n  }\n\n  return (\n    <div>\n      Welcome {user.name}!<br /><br />\n      <input type=\"button\" onClick={handleLogout} value=\"Logout\" />\n      <div>\n      </div>\n\n    </div>\n  );\n}\nexport default Dashboard;\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div>\n      Welcome to the Home Page!\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { getToken } from './Common';\n\n// handle the private routes\nfunction PrivateRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => getToken() ? <Component {...props} /> : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n\nexport default PrivateRoute;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { getToken } from './Common';\n\n// handle the public routes\nfunction PublicRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => !getToken() ? <Component {...props} /> : <Redirect to={{ pathname: '/dashboard' }} />}\n    />\n  )\n}\n\nexport default PublicRoute;","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport Login from './Login';\r\nimport Dashboard from './Dashboard';\r\nimport Home from './Home';\r\nimport PrivateRoute from '../Utils/PrivateRoute';\r\nimport PublicRoute from '../Utils/PublicRoute';\r\nimport { getToken, removeUserSession, setUserSession } from '../Utils/Common';\r\n\r\nfunction Navbar(props){\r\n    const [authLoading, setAuthLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const token = getToken();\r\n        if (!token) {\r\n        return;\r\n        }\r\n\r\n        axios.get(`http://localhost:5000/verifyToken?token=${token}`).then(response => {\r\n        setUserSession(response.data.token, response.data.user);\r\n        setAuthLoading(false);\r\n        }).catch(error => {\r\n        removeUserSession();\r\n        setAuthLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    if (authLoading && getToken()) {\r\n        return <div className=\"content\">Checking Authentication...</div>\r\n    }\r\n        return(\r\n            <div>\r\n                <BrowserRouter>\r\n                    <nav className = \"blue darken-4\">\r\n                        <div className = \"card\">\r\n                            <div className = \"nav-wrapper\">\r\n\r\n                                <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\r\n                                <div></div>\r\n\r\n                                <NavLink activeClassName=\"active\" to=\"/login\">Login</NavLink><small></small>\r\n                                <div></div>\r\n                                <NavLink activeClassName=\"active\" to=\"/dashboard\">Dashboard</NavLink><small></small>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    <div className = 'content'>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={Home} />\r\n                            <PublicRoute path=\"/login\" component={Login} />\r\n                            <PrivateRoute path=\"/dashboard\" component={Dashboard} />\r\n                        </Switch>\r\n                    </div>\r\n                    \r\n                </BrowserRouter>\r\n                \r\n            </div>\r\n        )\r\n    \r\n}\r\nexport default Navbar;","import React from 'react'\nimport Styles from './UploadItem.module.css'\n\nconst UploadItem = props => {\n  const { file, progress } = props.file\n\n  return (\n    <div className={Styles.wrapperItem}>\n      <div className={Styles.leftSide}>\n        <div className={Styles.progressBar}>\n          <div style={{ width: `${progress}%` }} />\n        </div>\n        <label>{file.name}</label>\n      </div>\n      <span className={Styles.percentage}>{progress}%</span>\n    </div>\n  )\n}\n\nexport default UploadItem\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { size, toArray } from 'lodash'\n\nimport { uploadFile } from '../../redux/uploadFile/uploadFile.actions'\nimport UploadItem from '../UploadItem/UploadItem'\nimport Styles from './UploadProgress.module.css'\n\nconst UploadProgress = props => {\n  const { fileProgress, uploadFile } = props\n  const uploadedFileAmount = size(fileProgress)\n\n  useEffect(() => {\n    const fileToUpload = toArray(fileProgress).filter(file => file.progress === 0)\n    uploadFile(fileToUpload)\n  }, [uploadedFileAmount])\n\n  return uploadedFileAmount > 0 ? (\n    <div className={Styles.wrapper}>\n      <h4>Uploading File</h4>\n      {size(fileProgress)\n        ? toArray(fileProgress).map(file => <UploadItem key={file.id} file={file} />)\n        : null}\n    </div>\n  ) : null\n}\n\nconst mapStateToProps = state => ({\n  fileProgress: state.UploadFile.fileProgress,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  uploadFile: files => dispatch(uploadFile(files)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UploadProgress)\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux'\nimport { setUploadFile } from './redux/uploadFile/uploadFile.actions'\nimport Navbar from './components/Navbar';\nimport { getToken, removeUserSession, setUserSession } from './Utils/Common';\nimport UploadProgress from './components/UploadProgress/UploadProgress'\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction App(props) {\n  const [authLoading, setAuthLoading] = useState(true);\n  const handleAttachFIle = e => {\n    // could do some validation for the attached file here\n    props.setUploadFile(e.target.files)\n    e.target.value = '' // to clear the current file\n  }\n  useEffect(() => {\n    const token = getToken();\n    if (!token) {\n      return;\n    }\n\n\n    axios.get(`http://localhost:5000/verifyToken?token=${token}`).then(response => {\n      setUserSession(response.data.token, response.data.user);\n      setAuthLoading(false);\n    }).catch(error => {\n      removeUserSession();\n      setAuthLoading(false);\n    });\n  }, []);\n\n  if (authLoading && getToken()) {\n    return <div className=\"content\">Checking Authentication...</div>\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <input type=\"file\" multiple onChange={handleAttachFIle} />\n      </header>\n      <UploadProgress />\n    </div>\n  )\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setUploadFile: files => dispatch(setUploadFile(files)),\n})\n\nexport default connect(null, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import axios from 'axios'\nimport { size } from 'lodash'\n\nexport const modifyFiles = (existingFiles, files) => {\n  let fileToUpload = {}\n\n  for (let i = 0; i < files.length; i++) {\n    const id = size(existingFiles) + i + 1\n    // const CancelToken = axios.CancelToken  --> can be used for cancelling upload progress\n    // const source = CancelToken.source()\n\n    fileToUpload = {\n      ...fileToUpload,\n      [id]: {\n        id,\n        file: files[i],\n        progress: 0,\n        // cancelSource: source,\n      },\n    }\n  }\n\n  return fileToUpload\n}\n","import uploadFileTypes from './uploadFile.types'\nimport { modifyFiles } from './uploadFile.utils'\n\nconst INITIAL_STATE = {\n  fileProgress: {\n    // format will be like below\n    // 1: {\n    //   id: 1,\n    //   file,\n    //   progress: 0,\n    //   cancelSource: source,\n    //   status: 0,\n    // },\n  },\n}\n\nconst fileProgressReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case uploadFileTypes.SET_UPLOAD_FILE:\n      return {\n        ...state,\n        fileProgress: {\n          ...state.fileProgress,\n          ...modifyFiles(state.fileProgress, action.payload),\n        },\n      }\n\n    case uploadFileTypes.SET_UPLOAD_PROGRESS:\n      return {\n        ...state,\n        fileProgress: {\n          ...state.fileProgress,\n          [action.payload.id]: {\n            ...state.fileProgress[action.payload.id],\n            progress: action.payload.progress,\n          },\n        },\n      }\n\n    case uploadFileTypes.SUCCESS_UPLOAD_FILE:\n      return {\n        ...state,\n        fileProgress: {\n          ...state.fileProgress,\n          [action.payload]: {\n            ...state.fileProgress[action.payload],\n            status: 1,\n          },\n        },\n      }\n\n    case uploadFileTypes.FAILURE_UPLOAD_FILE:\n      return {\n        ...state,\n        fileProgress: {\n          ...state.fileProgress,\n          [action.payload]: {\n            ...state.fileProgress[action.payload],\n            status: 0,\n            progress: 0,\n          },\n        },\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default fileProgressReducer\n","import { combineReducers } from 'redux'\nimport UploadFile from './uploadFile/uploadFile.reducer'\n\nconst rootReducer = combineReducers({\n  UploadFile,\n})\n\nexport default rootReducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport rootReducer from './redux/root-reducer'\n\nconst middleware = [thunk]\nconst composeEnchancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnchancers(applyMiddleware(...middleware)))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}